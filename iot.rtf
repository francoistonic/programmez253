{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fnil\fcharset0 Calibri;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red145\green145\blue145;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c57041\c57043\c57043;\csgenericrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs16 \cf2 \
#include <lmic.h>\
#include <hal/hal.h>\
#include <LowPower.h>\
\
const lmic_pinmap lmic_pins = \{\
    .nss = 10,\
    .rxtx = LMIC_UNUSED_PIN,\
    .rst = 9,\
    .dio = \{2, 5, LMIC_UNUSED_PIN\},\
\};\
\
#define TXPERIOD  (5*60) // 5 minutes\
\
static const u1_t PROGMEM APPEUI[8] = \{0x60, 0x81, 0xF9, 0x00, 0xF0, 0x00, 0x8E, 0x6B\};\
static const u1_t PROGMEM DEVEUI[8] = \{0x60, 0x81, 0xF9, 0xB8, 0x34, 0x79, 0xA3, 0xFB\};\
static const u1_t PROGMEM APPKEY[16] = \{0xC3, 0x6F, 0xAE, 0x48, 0xDD, 0xB3, 0xE7, 0x38, 0x91, 0x2A, 0x55, 0xA6, 0x4B, 0x9B, 0xEC, 0x6D\};\
\
void os_getArtEui (u1_t* buf) \{ \
  for ( int i = 0 ; i < 8 ; i++ ) buf[7-i] = APPEUI[i];\
\}\
void os_getDevEui (u1_t* buf) \{ \
  for ( int i = 0 ; i < 8 ; i++ ) buf[7-i] = DEVEUI[i];\
\}\
void os_getDevKey (u1_t* buf) \{   \
  memcpy_P(buf, APPKEY, 16);\
\}\
\
void setup() \{\
\
    os_init();    // Intialisation de la biblioth\'e8que\
    LMIC_reset();\
    LMIC_setClockError(MAX_CLOCK_ERROR * 10 / 100); // agrandit la fenetre de reception\
    LMIC_setAdrMode(0);  // desactive le mode ADR\
    // Configure les canaux utilisables pour les communications  \
    LMIC_setupChannel(0, 868\uc0\u8201 100\u8201 000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      \
    LMIC_setupChannel(1, 868\uc0\u8201 300\u8201 000, DR_RANGE_MAP(DR_SF12, DR_SF7B), BAND_CENTI);      \
    LMIC_setupChannel(2, 868\uc0\u8201 500\u8201 000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      \
    LMIC_setupChannel(3, 867\uc0\u8201 100\u8201 000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      \
    LMIC_setupChannel(4, 867\uc0\u8201 300\u8201 000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);     \
    LMIC_setupChannel(5, 867\uc0\u8201 500\u8201 000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);     \
    LMIC_setupChannel(6, 867\uc0\u8201 700\u8201 000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      \
    LMIC_setupChannel(7, 867\uc0\u8201 900\u8201 000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);     \
    LMIC_setupChannel(8, 868\uc0\u8201 800\u8201 000, DR_RANGE_MAP(DR_FSK,  DR_FSK),  BAND_MILLI);    \
    // Configure la vitesse et la puissance de transmission   \
    LMIC.dn2Dr = SF9; \
    LMIC_setDrTxpow(DR_SF9,14); \
    LMIC_setLinkCheckMode(0); \
\}\
\
boolean canSleep = true;\
uint32_t temps = TXPERIOD;  // transmettre au demarrage\
uint8_t data[] = \{\
   0x01, 0x68, 0x00,     // canal 1, type de donn\'e9e Hygrometrie 1 ut = 0,5%\
\};\
\
void loop() \{\
  if ( temps >= TXPERIOD ) \{\
        canSleep = false;\
        // lecture de la donn\'e9e du capteur\
        int16_t v = analogRead(A0); // 100 % = 313 | 50% = 678 \
        data[2] = map(v, 636, 450, 0, 100) * 2;\
        // emission de la valeur\
        LMIC_setDrTxpow(DR_SF9,14); \
        lmic_tx_error_t err = LMIC_setTxData2(1, data, sizeof(data), 0);\
        temps=0;        \
  \}\
  // put your main code here, to run repeatedly:\
  os_runloop_once();\
  if ( canSleep ) \{\
    LowPower.powerDown(SLEEP_8S, ADC_OFF,BOD_OFF);\
    temps += 8;\
  \}\
\}\
\
void onEvent (ev_t ev) \{\
    switch(ev) \{\
        case EV_JOINED:\
            LMIC_setLinkCheckMode(0);\
            break;\
        case EV_TXCOMPLETE: \
            canSleep = true;\
          
\f1\fs24 \cf3   b
\f2 \cf0 reak;\
        default:\
            canSleep = false;\
            break;\
    \}\
\}\
\
\
}